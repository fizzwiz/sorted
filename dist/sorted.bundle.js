!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.sorted=e():t.sorted=e()}(self,(()=>(()=>{"use strict";var t={d:(e,r)=>{for(var o in r)t.o(r,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:r[o]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{ArrayQueue:()=>l,AsyncCollection:()=>c,Collection:()=>a,ORDER:()=>u,Queue:()=>h,SortedArray:()=>f});class r{constructor(t=void 0,e=void 0,r={}){this._parent=t,this._name=e,this._children=r}get parent(){return this._parent}set parent(t){this._parent=t}get name(){return this._name}let(t,e){return this[t]=e,this}letChild(t,e){return this._children[t]=e,e.parent=this,e._name=t,this}get(...t){return this.ancestors().which((e=>t.every((t=>void 0!==e[t])))).then((e=>e[t[0]])).what()}getChild(...t){let e=this;for(const r of t)if(e=e?._children?.[r],!e)break;return e}resolve(t){return"string"==typeof t?this.get(t):t}forget(t){return delete this[t],this}isLeaf(){return void 0===this.children().what()}isRoot(){return void 0===this.parent}children(){return i.as(Object.values(this._children))}root(){return this.parent?this.parent.root():this}ancestors(){return i.along(this,(t=>t.parent))}}class o extends r{constructor(t=void 0,e=void 0){super(t,void 0),this._last=e,this._length=t?t._length+1:void 0!==e?1:0}static of(...t){return(new o).along(t)}get prev(){return this._parent}get last(){return this._last}get length(){return this._length}let(t,e){throw new Error("A Path is immutable!")}letChild(t,e){throw new Error("A Path is immutable!")}forget(t){throw new Error("A Path is immutable!")}isEmpty(){return 0==this._length}add(t){return new o(0<this.length?this:void 0,t)}along(t){let e=this;for(let r of t)e=e.add(r);return e}across(t){const e=this,r=new i;return r[Symbol.iterator]=function*(){for(let r of t)yield e.add(r)},r}toArray(t=this.length,e=t=>t){const r=new Array(t);let o=this;for(;0<t;)r[t-1]=e(o.last),o=o.prev,t--;return r}}class n{what(...t){throw new Error("Abstract method what() must be implemented in subclasses!")}let(t,e){throw new Error("Abstract method let() must be implemented!")}static of(t,e){return Array.isArray(t)||(t=[t]),n.as(((...r)=>i.equal(t,r)?e:void 0))}static as(t){if(t instanceof n)return t;if("function"!=typeof t){const e=t;t=t=>t===e}const e=(...e)=>t(...e);return Object.setPrototypeOf(e,n.prototype),e.what=t,e}if(t=t=>void 0!==t){return n.if(this,t)}static if(t,e=t=>void 0!==t){return n.as((r=>n.what(e,r)?n.what(t,r):void 0))}sthen(t){return n.sthen(this,t)}static sthen(...t){return n.as((e=>{let r=e;for(let e of t){if(void 0===r)break;r=r instanceof Promise?r.stthen(e):n.what(e,r)}return r}))}else(t){return n.else(this,t)}static else(...t){return n.as((e=>{let r;for(let o of t){try{r=n.what(o,e)}catch{r=void 0}if(void 0!==r)break}return r}))}which(t=t=>void 0!==t){return n.which(this,t)}static which(t,e=t=>void 0!==t){return n.as((r=>i.as(n.what(t,r)).which(((t,o)=>e(t,o,r)))))}when(t,e=!0,r=e){return n.when(this,t,e,r)}static when(t,e,r=!0,o=r){const s="number"==typeof e;return n.as(((...a)=>{const c=s?e:(t,r)=>n.what(e,t,r,...a);return i.as(n.what(t,...a)).when(c,r,o)}))}match(...t){return n.match(this,...t)}static match(...t){const e=t.length<2?e=>{const r=n.what(t[0],e);return r[Symbol.iterator]?i.as(r).sthen((t=>[e,t])):[e,r]}:e=>t.map((t=>n.what(t,e)));return n.as(e)}each(t){return n.as(((...e)=>{const r=new i,o=i.as(this.what(...e)).which();return r[Symbol.iterator]=function*(){for(let e of o)for(let r of i.as(n.what(t,e)).which())yield r},r}))}static each(...t){return n.as((e=>{const r=e instanceof o?e:o.of(e);return r.length>t.length?i.of():r.across(i.as(n.what(t[r.length-1],r.last)).which()).which()}))}self(t=void 0,e=void 0){return n.self(this,t,e)}static self(t,e=void 0,r=void 0){let o;return o=void 0===e?void 0===r?e=>e.across(i.as(n.what(t,e.last)).which()):(...e)=>{const o=n.what(t,...e);if(void 0===o)return;const s={};return s[r]=o,s}:"number"==typeof e?(...o)=>{const s=o.splice(e,0,r);return n.what(t,...s)}:o=>{const s=i.as("string"==typeof e?[e]:e).sthen((t=>"string"==typeof t?o[t]:t)),a=n.what("string"==typeof t?o[t]:t,...s);if(void 0!==a)return void 0!==r?(o[r]=a,o):a},n.as(o)}static what(t,...e){return t instanceof n?t.what(...e):"function"==typeof t?t(...e):t}}class s{[Symbol.asyncIterator](){throw"abstract method!"}static of(...t){const e=new s;return e[Symbol.asyncIterator]=async function*(){for(const e of t)yield await e},e}static as(t){if(t instanceof s)return t;if(null!=t&&"function"==typeof t[Symbol.asyncIterator]){const e=new s;return e[Symbol.asyncIterator]=async function*(){for await(const e of t)yield e},e}if(null!=t&&"function"==typeof t[Symbol.iterator]){const e=new s;return e[Symbol.asyncIterator]=async function*(){for(const e of t)yield e},e}return s.of(t)}async toArray(){const t=[];for await(const e of this)t.push(e);return t}async equals(t){return s.equal(this,t)}static along(t,e){const r=new s;return r[Symbol.asyncIterator]=async function*(){let r=t;for(;null!=r;)yield r,r=await n.what(e,r)},r}static async equal(t,e){const r=s.as(t)[Symbol.asyncIterator](),o=s.as(e)[Symbol.asyncIterator]();for(;;){const[t,e]=await Promise.all([r.next(),o.next()]);if(t.done||e.done)return t.done===e.done;if(t.value instanceof s||e.value instanceof s){if(!await s.equal(t.value,e.value))return!1}else if(t.value!==e.value)return!1}}static isAsyncIterable(t){return null!=t&&"function"==typeof t[Symbol.asyncIterator]}if(t=t=>void 0!==t){const e=this,r=new s;return r[Symbol.asyncIterator]=async function*(){let r=0;for await(const o of e)await t(o,r++)&&(yield o)},r}sthen(t){const e=this,r=new s;return r[Symbol.asyncIterator]=async function*(){let r=0;for await(const o of e)yield await t(o,r++)},r}else(t=void 0){return void 0===t?s.else(this):s.else([this,s.as(t)])}static else(t){const e=new s;return e[Symbol.asyncIterator]=async function*(){for await(const e of s.as(t)){const t=s.as(e);for await(const e of t)yield e}},e}which(t){return this.if(t)}when(t,e=!0,r=e){return s.when(this,t,e,r)}static when(t,e,r=!0,o=r){if(void 0===e){const e={};return e[Symbol.asyncIterator]=async function*(){for await(const e of t)yield e},s.as(e)}if("number"==typeof e){const t=e;e=(e,r)=>r===t}const i=new s;return i[Symbol.asyncIterator]=r?async function*(){let r=0,s=!1;for await(const i of t)s?yield i:await n.what(e,i,r)&&(s=!0,o&&(yield i)),r++}:async function*(){let r=0,s=!1;for await(const i of t){if(s)break;await n.what(e,i,r)?(s=!0,o&&(yield i)):yield i,r++}},i}match(t=void 0){return void 0===t?s.match(this):s.match(this,s.as(t))}static match(...t){const e=new s,r=t.map((t=>s.as(t)));return e[Symbol.asyncIterator]=async function*(){const t=r.map((t=>t[Symbol.asyncIterator]()));for(;;){const e=await Promise.all(t.map((t=>t.next())));if(e.some((t=>t.done)))break;yield e.map((t=>t.value))}},e}each(t=void 0){if(void 0===t)return s.each(...this);const e=this,r=new s;return r[Symbol.asyncIterator]=async function*(){for await(const r of e)for await(const e of s.as(t))yield[r,e]},r}static each(...t){const e=t.map((t=>s.as(t)));return n.as((t=>{if(t.length>=e.length)return s.of();const r=e[t.length],o=new s;return o[Symbol.asyncIterator]=async function*(){for await(const e of r)yield t.add(e)},o}))}self(){return s.self(this)}static self(t){const e=s.as(t),r=new s;return r[Symbol.asyncIterator]=async function*(){for(;;)yield e},r}what(t,e){return s.what(this,t,e)}static async what(t,e,r){const o=s.as(t);if(e){let t=void 0!==r;for await(const s of o)t?r=await n.what(e,r,s):(r=s,t=!0);return r}for await(const t of o)return t}}class i{[Symbol.iterator](){throw"abstract method!"}static as(t){if(void 0===t)return i.of();if(t instanceof i)return t;if(t[Symbol.iterator]){const e=new i;return e[Symbol.iterator]=t[Symbol.iterator].bind(t),e}{const e=new i;return e[Symbol.iterator]=function*(){yield t},e}}static of(...t){const e=new i;return e[Symbol.iterator]=function*(){for(const e of t)yield e},e}static along(t,e){const r=new i;return r[Symbol.iterator]=function*(){let r=t;for(;r;)yield r,r=n.what(e,r)},r}toArray(){return Array.from(this)}equals(t){return i.equal(this,t)}static equal(t,e){if("string"==typeof t||!i.isIterable(t)||"string"==typeof e||!i.isIterable(e))return t===e;{const r=t[Symbol.iterator](),o=e[Symbol.iterator]();for(;;){const t=r.next(),e=o.next();if(t.done||e.done)return t.done===e.done;if(!i.equal(t.value,e.value))return!1}}}static isIterable(t){return null!=t&&"function"==typeof t[Symbol.iterator]}if(t=t=>void 0!==t){return i.if(this,t)}static if(t,e=t=>void 0!==t){return i.which(t,e)}sthen(t){return i.sthen(this,t)}static sthen(t,e){const r=new i;return r[Symbol.iterator]=function*(){let r=0;for(let o of t)yield n.what(e,o,r++)},r}else(t=void 0){return void 0===t?i.else(this):i.else(i.of(this,i.as(t)))}static else(t){const e=new i;return e[Symbol.iterator]=function*(){for(let e of t)if(e[Symbol.iterator])for(let t of e)yield t;else yield e},e}which(t=t=>void 0!==t){return i.which(this,t)}static which(t,e=t=>void 0!==t){const r=new i;return r[Symbol.iterator]=function*(){let r=0;for(let o of t)n.what(e,o,r++)&&(yield o)},r}when(t,e=!0,r=e){return i.when(this,t,e,r)}static when(t,e,r=!0,o=r){if(void 0===e){const e={};return e[Symbol.asyncIterator]=async function*(){for(const e of t)yield await e},s.as(e)}if("number"==typeof e){const t=e;e=(e,r)=>r===t}const a=new i;return a[Symbol.iterator]=r?function*(){let r=0,s=!1;for(let i of t)s?yield i:n.what(e,i,r)&&(s=!0,o&&(yield i)),r++}:function*(){let r=0,s=!1;for(let i of t){if(s)break;n.what(e,i,r)?(s=!0,o&&(yield i)):yield i,r++}},a}match(t=void 0){return void 0===t?i.match(...this):i.match(this,i.as(t))}static match(...t){const e=new i;return e[Symbol.iterator]=function*(){const e=t.map((t=>t[Symbol.iterator]()));for(;;){const t=e.map((t=>t.next()));if(t.some((t=>t.done)))break;yield t.map((t=>t.value))}},e}each(t=void 0){if(void 0===t)return i.each(...this);const e=this,r=new i;return r[Symbol.iterator]=function*(){for(let r of e)for(let e of i.as(t))yield[r,e]},r}static each(...t){return t=t.map((t=>t[Symbol.iterator]?t:[t])),n.as((e=>e.length<t.length?e.across(t[e.length]):i.of()))}self(){return i.self(this)}static self(t){const e=new i;return e[Symbol.iterator]=function*(){for(;;)yield t},e}what(t=void 0,e=void 0){return i.what(this,t,e)}static what(t,e,r){if(e){void 0===r&&(r=i.what(t),t=i.when(t,1));for(let o of t)r=n.what(e,r,o);return r}for(let e of t)return e}}i.NATURAL=new i,i.NATURAL[Symbol.iterator]=function*(){let t=0;for(;;)yield t++};class a extends i{constructor(){super()}n(){throw new Error("Abstract method: n()")}has(t){throw new Error("Abstract method: has(item)")}add(t){throw new Error("Abstract method: add(item)")}remove(t){throw new Error("Abstract method: remove(item)")}clear(){throw new Error("Abstract method: clear()")}get(t){throw new Error("Abstract method: get(query)")}[Symbol.iterator](){throw new Error("Abstract method: Symbol.iterator()")}create(t){return!this.has(t)&&this.add(t)}read(t){return this.has(t)?i.as(this.get(t)).what():void 0}readAll(t){return this.get(t)}update(t,e,r=!1){return this.has(t)?this.remove(t)&&this.add(e):!!r&&this.add(e)}delete(t){return this.remove(t)}deleteAll(t){return this.removeAll(t)}query(t){return this.get(t)}isEmpty(){return 0===this.n()}let(t){return this.add(t),this}addAll(t){const e=[];for(const r of t)this.add(r)&&e.push(r);return this}removeAll(t){const e=[];for(const r of t)this.remove(r)&&e.push(r);return e}}class c extends s{constructor(){super()}async n(){throw new Error("Abstract method: n()")}async has(t){throw new Error("Abstract method: has(item)")}async add(t){throw new Error("Abstract method: add(item)")}async remove(t){throw new Error("Abstract method: remove(item)")}async clear(){throw new Error("Abstract method: clear()")}get(t){throw new Error("Abstract method: get(query)")}[Symbol.asyncIterator](){throw new Error("Abstract method: Symbol.asyncIterator()")}async create(t){return!await this.has(t)&&this.add(t)}async read(t){if(await this.has(t))for await(const e of this.get(t))return e}readAll(t){return this.get(t)}async update(t,e,r=!1){return await this.has(t)?await this.remove(t)&&await this.add(e):!!r&&this.add(e)}async delete(t){return this.remove(t)}async deleteAll(t){return this.removeAll(t)}query(t){return this.get(t)}async isEmpty(){return 0===await this.n()}async addAll(t){const e=[];for await(const r of t)await this.add(r)&&e.push(r);return e}async removeAll(t){const e=[];for await(const r of t)await this.remove(r)&&e.push(r);return e}}class h extends a{constructor(){super()}peek(t=!0){throw new Error("Abstract method: peek() must be implemented by subclass.")}poll(t=!0){throw new Error("Abstract method: poll() must be implemented by subclass.")}reverse(){throw new Error("Abstract method: reverse() must be implemented by subclass.")}select(t,e=!0){t<0&&(t=0);const r=this.n()-t,o=new Array(r<0?0:r).fill(void 0);let n=e?o.length-1:0;const s=e?-1:1;for(;this.n()>t;){const t=this.poll(!e);o[n]=t,n+=s}return o}}class l extends h{constructor(t=!0,e=[]){super(),this._fifo=t,this._items=e}get fifo(){return this._fifo}get items(){return this._items}n(){return this.items.length}has(t){return!1}add(t){return this.items.push(t),!0}remove(t){return!1}peek(t=!0){return this.items[this.index(t)]}poll(t=!0){return 0===this.index(t)?this.items.shift():this.items.pop()}index(t){return this.fifo?t?0:this.items.length-1:t?this.items.length-1:0}clear(){return this.items.length=0,!0}[Symbol.iterator](){return this.items[Symbol.iterator]()}reverse(){const t=new i,e=this;return t[Symbol.iterator]=function*(){let t=e.items.length-1;for(;t>=0;)yield e.items[t],t--},t}}const u={ASCENDING:(t,e)=>(t?.value??t)-(e?.value??e),DESCENDING:(t,e)=>(e?.value??e)-(t?.value??t),INSERTION:void 0,SINGULAR:(t,e)=>0};class f extends l{constructor(t=u.ASCENDING,e=[]){super(!0,[]),this._comparator=t,this._items=[];for(const t of e)this.add(t)}get items(){return this._items}get comparator(){return this._comparator}has(t){const[e,r]=f.logSearch(t,this.items,this.comparator);return void 0!==r}add(t){const[e,r]=f.logSearch(t,this.items,this.comparator);return void 0===r&&(this.items.splice(e,0,t),!0)}remove(t){const[e,r]=f.logSearch(t,this.items,this.comparator);return void 0!==r&&(this.items.splice(e,1),!0)}static logSearch(t,e,r,o=0,n=e.length){for(;o<n;){const s=o+n>>>1,i=r(e[s],t);if(0===i)return[s,e[s]];i<0?o=s+1:n=s}return[o,void 0]}}return e})()));